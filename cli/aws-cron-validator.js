"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AWSCronValidator = void 0;
class AWSCronError extends Error {
}
const aws_cron_expressions_1 = require("./aws-cron-expressions");
class AWSCronValidator {
    static validate(expression) {
        if (!expression.trim()) {
            throw new AWSCronError(`No parameters entered, this format is required in UTC: 0 20 ? * SUN-FRI *`);
        }
        const valueCount = expression.split(" ").length;
        if (valueCount !== 6) {
            throw new AWSCronError(`Incorrect amount of parameters in '${expression}'. 6 required, ${valueCount} provided.`);
        }
        const [minute, hour, dayOfMonth, month, dayOfWeek, year] = expression.split(" ");
        // special handling for Day of Month and Day of Week
        if (!((dayOfMonth === "?" && dayOfWeek !== "?") || (dayOfMonth !== "?" && dayOfWeek === "?"))) {
            throw new AWSCronError(`Invalid combination of day-of-month '${dayOfMonth}' and day-of-week '${dayOfWeek}'. One must be a question mark (?)`);
        }
        if (!new RegExp(aws_cron_expressions_1.minuteRegex()).test(minute)) {
            throw new AWSCronError(`Invalid minute value '${minute}'.`);
        }
        if (!new RegExp(aws_cron_expressions_1.hourRegex()).test(hour)) {
            throw new AWSCronError(`Invalid hour value '${hour}'.`);
        }
        if (!new RegExp(aws_cron_expressions_1.dayOfMonthRegex()).test(dayOfMonth)) {
            throw new AWSCronError(`Invalid day-of-month value '${dayOfMonth}'.`);
        }
        if (!new RegExp(aws_cron_expressions_1.monthRegex(), 'i').test(month)) {
            throw new AWSCronError(`Invalid month value '${month}'.`);
        }
        if (!new RegExp(aws_cron_expressions_1.dayOfWeekRegex(), 'i').test(dayOfWeek)) {
            throw new AWSCronError(`Invalid day-of-week value '${dayOfWeek}'.`);
        }
        if (!new RegExp(aws_cron_expressions_1.yearRegex()).test(year)) {
            throw new AWSCronError(`Invalid year value '${year}'.`);
        }
        return expression;
    }
}
exports.AWSCronValidator = AWSCronValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWNyb24tdmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXdzLWNyb24tdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sWUFBYSxTQUFRLEtBQUs7Q0FBRztBQUVuQyxpRUFPZ0M7QUFFaEMsTUFBYSxnQkFBZ0I7SUFFbEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFrQjtRQUNyQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxZQUFZLENBQ2xCLDJFQUEyRSxDQUM5RSxDQUFDO1NBQ0w7UUFDRCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNoRCxJQUFJLFVBQVUsS0FBSyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxJQUFJLFlBQVksQ0FDbEIsc0NBQXNDLFVBQVUsa0JBQWtCLFVBQVUsWUFBWSxDQUMzRixDQUFDO1NBQ0g7UUFFRCxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpGLG9EQUFvRDtRQUNwRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsS0FBSyxHQUFHLElBQUksU0FBUyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEdBQUcsSUFBSSxTQUFTLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtZQUMzRixNQUFNLElBQUksWUFBWSxDQUNsQix3Q0FBd0MsVUFBVSxzQkFBc0IsU0FBUyxvQ0FBb0MsQ0FDeEgsQ0FBQztTQUNMO1FBRUQsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLGtDQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6QyxNQUFNLElBQUksWUFBWSxDQUFDLHlCQUF5QixNQUFNLElBQUksQ0FBQyxDQUFDO1NBQy9EO1FBQ0QsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLGdDQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNyQyxNQUFNLElBQUksWUFBWSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLHNDQUFlLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNqRCxNQUFNLElBQUksWUFBWSxDQUFDLCtCQUErQixVQUFVLElBQUksQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLGlDQUFVLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUMsTUFBTSxJQUFJLFlBQVksQ0FBQyx3QkFBd0IsS0FBSyxJQUFJLENBQUMsQ0FBQztTQUM3RDtRQUNELElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxxQ0FBYyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3BELE1BQU0sSUFBSSxZQUFZLENBQUMsOEJBQThCLFNBQVMsSUFBSSxDQUFDLENBQUM7U0FDdkU7UUFDRCxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsZ0NBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxZQUFZLENBQUMsdUJBQXVCLElBQUksSUFBSSxDQUFDLENBQUM7U0FDM0Q7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0NBQ0o7QUE3Q0QsNENBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQVdTQ3JvbkVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuaW1wb3J0IHtcbiAgbWludXRlUmVnZXgsXG4gIGhvdXJSZWdleCxcbiAgZGF5T2ZNb250aFJlZ2V4LFxuICBtb250aFJlZ2V4LFxuICBkYXlPZldlZWtSZWdleCxcbiAgeWVhclJlZ2V4LFxufSBmcm9tICcuL2F3cy1jcm9uLWV4cHJlc3Npb25zJztcblxuZXhwb3J0IGNsYXNzIEFXU0Nyb25WYWxpZGF0b3Ige1xuXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZShleHByZXNzaW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWV4cHJlc3Npb24udHJpbSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQVdTQ3JvbkVycm9yKFxuICAgICAgICAgICAgICAgIGBObyBwYXJhbWV0ZXJzIGVudGVyZWQsIHRoaXMgZm9ybWF0IGlzIHJlcXVpcmVkIGluIFVUQzogMCAyMCA/ICogU1VOLUZSSSAqYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZUNvdW50ID0gZXhwcmVzc2lvbi5zcGxpdChcIiBcIikubGVuZ3RoO1xuICAgICAgICBpZiAodmFsdWVDb3VudCAhPT0gNikge1xuICAgICAgICAgIHRocm93IG5ldyBBV1NDcm9uRXJyb3IoXG4gICAgICAgICAgICAgIGBJbmNvcnJlY3QgYW1vdW50IG9mIHBhcmFtZXRlcnMgaW4gJyR7ZXhwcmVzc2lvbn0nLiA2IHJlcXVpcmVkLCAke3ZhbHVlQ291bnR9IHByb3ZpZGVkLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgW21pbnV0ZSwgaG91ciwgZGF5T2ZNb250aCwgbW9udGgsIGRheU9mV2VlaywgeWVhcl0gPSBleHByZXNzaW9uLnNwbGl0KFwiIFwiKTtcblxuICAgICAgICAvLyBzcGVjaWFsIGhhbmRsaW5nIGZvciBEYXkgb2YgTW9udGggYW5kIERheSBvZiBXZWVrXG4gICAgICAgIGlmICghKChkYXlPZk1vbnRoID09PSBcIj9cIiAmJiBkYXlPZldlZWsgIT09IFwiP1wiKSB8fCAoZGF5T2ZNb250aCAhPT0gXCI/XCIgJiYgZGF5T2ZXZWVrID09PSBcIj9cIikpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQVdTQ3JvbkVycm9yKFxuICAgICAgICAgICAgICAgIGBJbnZhbGlkIGNvbWJpbmF0aW9uIG9mIGRheS1vZi1tb250aCAnJHtkYXlPZk1vbnRofScgYW5kIGRheS1vZi13ZWVrICcke2RheU9mV2Vla30nLiBPbmUgbXVzdCBiZSBhIHF1ZXN0aW9uIG1hcmsgKD8pYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbmV3IFJlZ0V4cChtaW51dGVSZWdleCgpKS50ZXN0KG1pbnV0ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBV1NDcm9uRXJyb3IoYEludmFsaWQgbWludXRlIHZhbHVlICcke21pbnV0ZX0nLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV3IFJlZ0V4cChob3VyUmVnZXgoKSkudGVzdChob3VyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFXU0Nyb25FcnJvcihgSW52YWxpZCBob3VyIHZhbHVlICcke2hvdXJ9Jy5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZGF5T2ZNb250aFJlZ2V4KCkpLnRlc3QoZGF5T2ZNb250aCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBV1NDcm9uRXJyb3IoYEludmFsaWQgZGF5LW9mLW1vbnRoIHZhbHVlICcke2RheU9mTW9udGh9Jy5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5ldyBSZWdFeHAobW9udGhSZWdleCgpLCAnaScpLnRlc3QobW9udGgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQVdTQ3JvbkVycm9yKGBJbnZhbGlkIG1vbnRoIHZhbHVlICcke21vbnRofScuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGRheU9mV2Vla1JlZ2V4KCksICdpJykudGVzdChkYXlPZldlZWspKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQVdTQ3JvbkVycm9yKGBJbnZhbGlkIGRheS1vZi13ZWVrIHZhbHVlICcke2RheU9mV2Vla30nLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV3IFJlZ0V4cCh5ZWFyUmVnZXgoKSkudGVzdCh5ZWFyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFXU0Nyb25FcnJvcihgSW52YWxpZCB5ZWFyIHZhbHVlICcke3llYXJ9Jy5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByZXNzaW9uO1xuICAgIH1cbn1cbiJdfQ==