"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const fs = require("node:fs");
const path = require("node:path");
class Utils {
    static copyDirRecursive(sourceDir, targetDir) {
        if (!fs.existsSync(targetDir)) {
            fs.mkdirSync(targetDir);
        }
        const files = fs.readdirSync(sourceDir);
        for (const file of files) {
            const sourceFilePath = path.join(sourceDir, file);
            const targetFilePath = path.join(targetDir, file);
            const stats = fs.statSync(sourceFilePath);
            if (stats.isDirectory()) {
                Utils.copyDirRecursive(sourceFilePath, targetFilePath);
            }
            else {
                fs.copyFileSync(sourceFilePath, targetFilePath);
            }
        }
    }
    static getDefaultEmbeddingsModel(config) {
        const defaultModel = config.rag.embeddingsModels.find((model) => model.default === true);
        if (!defaultModel) {
            throw new Error("No default embeddings model found");
        }
        return `${defaultModel.provider}::${defaultModel.dimensions}::${defaultModel.name}`;
    }
    static getDefaultCrossEncoderModel(config) {
        const defaultModel = config.rag.crossEncoderModels.find((model) => model.default === true);
        if (!defaultModel) {
            throw new Error("No default cross encoder model found");
        }
        return `${defaultModel.provider}::${defaultModel.name}`;
    }
    static getName(config, value, maxLength = 28) {
        const prefix = config.prefix;
        let name = prefix && prefix.length > 0 ? `${prefix}-${value}` : value;
        // Convert name to lowercase
        name = name.toLowerCase();
        // Remove any characters that are not a-z, 0-9, or hyphen
        name = name.replace(/[^a-z0-9-]/g, "");
        // Ensure name doesn't start or end with a hyphen
        if (name.startsWith("-")) {
            name = name.slice(1);
        }
        if (name.endsWith("-")) {
            name = name.slice(0, -1);
        }
        // Ensure name is between 3 and 28 characters
        if (name.length < 3) {
            throw new Error("Generated name is too short. It must be between 3 and 28 characters.");
        }
        name = name.slice(0, maxLength);
        // Ensure name starts with a lowercase letter
        if (!/^[a-z]/.test(name)) {
            throw new Error("Generated name must start with a lowercase letter.");
        }
        return name;
    }
}
exports.Utils = Utils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4QkFBOEI7QUFDOUIsa0NBQWtDO0FBR2xDLE1BQXNCLEtBQUs7SUFDekIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQWlCLEVBQUUsU0FBaUI7UUFDMUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDN0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QjtRQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFeEMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbEQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUUxQyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDdkIsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDTCxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQzthQUNqRDtTQUNGO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxNQUFvQjtRQUNuRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDbkQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUNsQyxDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDdEQ7UUFFRCxPQUFPLEdBQUcsWUFBWSxDQUFDLFFBQVEsS0FBSyxZQUFZLENBQUMsVUFBVSxLQUFLLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0RixDQUFDO0lBRUQsTUFBTSxDQUFDLDJCQUEyQixDQUFDLE1BQW9CO1FBQ3JELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUNyRCxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQ2xDLENBQUM7UUFFRixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUN6RDtRQUVELE9BQU8sR0FBRyxZQUFZLENBQUMsUUFBUSxLQUFLLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFvQixFQUFFLEtBQWEsRUFBRSxTQUFTLEdBQUcsRUFBRTtRQUNoRSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksSUFBSSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUV0RSw0QkFBNEI7UUFDNUIsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUxQix5REFBeUQ7UUFDekQsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXZDLGlEQUFpRDtRQUNqRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEI7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7UUFFRCw2Q0FBNkM7UUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUNiLHNFQUFzRSxDQUN2RSxDQUFDO1NBQ0g7UUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFaEMsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQztTQUN2RTtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBOUVELHNCQThFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gXCJub2RlOmZzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJub2RlOnBhdGhcIjtcbmltcG9ydCB7IFN5c3RlbUNvbmZpZyB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBVdGlscyB7XG4gIHN0YXRpYyBjb3B5RGlyUmVjdXJzaXZlKHNvdXJjZURpcjogc3RyaW5nLCB0YXJnZXREaXI6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyh0YXJnZXREaXIpKSB7XG4gICAgICBmcy5ta2RpclN5bmModGFyZ2V0RGlyKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKHNvdXJjZURpcik7XG5cbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgIGNvbnN0IHNvdXJjZUZpbGVQYXRoID0gcGF0aC5qb2luKHNvdXJjZURpciwgZmlsZSk7XG4gICAgICBjb25zdCB0YXJnZXRGaWxlUGF0aCA9IHBhdGguam9pbih0YXJnZXREaXIsIGZpbGUpO1xuICAgICAgY29uc3Qgc3RhdHMgPSBmcy5zdGF0U3luYyhzb3VyY2VGaWxlUGF0aCk7XG5cbiAgICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIFV0aWxzLmNvcHlEaXJSZWN1cnNpdmUoc291cmNlRmlsZVBhdGgsIHRhcmdldEZpbGVQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZzLmNvcHlGaWxlU3luYyhzb3VyY2VGaWxlUGF0aCwgdGFyZ2V0RmlsZVBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0RW1iZWRkaW5nc01vZGVsKGNvbmZpZzogU3lzdGVtQ29uZmlnKTogc3RyaW5nIHtcbiAgICBjb25zdCBkZWZhdWx0TW9kZWwgPSBjb25maWcucmFnLmVtYmVkZGluZ3NNb2RlbHMuZmluZChcbiAgICAgIChtb2RlbCkgPT4gbW9kZWwuZGVmYXVsdCA9PT0gdHJ1ZVxuICAgICk7XG5cbiAgICBpZiAoIWRlZmF1bHRNb2RlbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZGVmYXVsdCBlbWJlZGRpbmdzIG1vZGVsIGZvdW5kXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtkZWZhdWx0TW9kZWwucHJvdmlkZXJ9Ojoke2RlZmF1bHRNb2RlbC5kaW1lbnNpb25zfTo6JHtkZWZhdWx0TW9kZWwubmFtZX1gO1xuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHRDcm9zc0VuY29kZXJNb2RlbChjb25maWc6IFN5c3RlbUNvbmZpZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZGVmYXVsdE1vZGVsID0gY29uZmlnLnJhZy5jcm9zc0VuY29kZXJNb2RlbHMuZmluZChcbiAgICAgIChtb2RlbCkgPT4gbW9kZWwuZGVmYXVsdCA9PT0gdHJ1ZVxuICAgICk7XG5cbiAgICBpZiAoIWRlZmF1bHRNb2RlbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZGVmYXVsdCBjcm9zcyBlbmNvZGVyIG1vZGVsIGZvdW5kXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtkZWZhdWx0TW9kZWwucHJvdmlkZXJ9Ojoke2RlZmF1bHRNb2RlbC5uYW1lfWA7XG4gIH1cblxuICBzdGF0aWMgZ2V0TmFtZShjb25maWc6IFN5c3RlbUNvbmZpZywgdmFsdWU6IHN0cmluZywgbWF4TGVuZ3RoID0gMjgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHByZWZpeCA9IGNvbmZpZy5wcmVmaXg7XG4gICAgbGV0IG5hbWUgPSBwcmVmaXggJiYgcHJlZml4Lmxlbmd0aCA+IDAgPyBgJHtwcmVmaXh9LSR7dmFsdWV9YCA6IHZhbHVlO1xuXG4gICAgLy8gQ29udmVydCBuYW1lIHRvIGxvd2VyY2FzZVxuICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBSZW1vdmUgYW55IGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGEteiwgMC05LCBvciBoeXBoZW5cbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXmEtejAtOS1dL2csIFwiXCIpO1xuXG4gICAgLy8gRW5zdXJlIG5hbWUgZG9lc24ndCBzdGFydCBvciBlbmQgd2l0aCBhIGh5cGhlblxuICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCItXCIpKSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgxKTtcbiAgICB9XG4gICAgaWYgKG5hbWUuZW5kc1dpdGgoXCItXCIpKSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCAtMSk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIG5hbWUgaXMgYmV0d2VlbiAzIGFuZCAyOCBjaGFyYWN0ZXJzXG4gICAgaWYgKG5hbWUubGVuZ3RoIDwgMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkdlbmVyYXRlZCBuYW1lIGlzIHRvbyBzaG9ydC4gSXQgbXVzdCBiZSBiZXR3ZWVuIDMgYW5kIDI4IGNoYXJhY3RlcnMuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIG1heExlbmd0aCk7XG5cbiAgICAvLyBFbnN1cmUgbmFtZSBzdGFydHMgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXJcbiAgICBpZiAoIS9eW2Etel0vLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRlZCBuYW1lIG11c3Qgc3RhcnQgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXIuXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xuICB9XG59XG4iXX0=