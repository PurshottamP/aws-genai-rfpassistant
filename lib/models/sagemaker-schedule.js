"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStopSchedule = exports.createStartSchedule = void 0;
const scheduler = require("aws-cdk-lib/aws-scheduler");
const utils_1 = require("../shared/utils");
function createStartSchedule(scope, id, sagemakerEndpoint, role, config) {
    const scheduleName = utils_1.Utils.getName(config, `startSchedule-${sagemakerEndpoint.endpointName}`, 64);
    const scheduleExpression = config.llms?.sagemakerSchedule?.sagemakerCronStartSchedule;
    const timeZone = config.llms?.sagemakerSchedule?.timezonePicker;
    const enableScheduleEndDate = config.llms?.sagemakerSchedule?.enableScheduleEndDate;
    const scheduleEndDate = config.llms?.sagemakerSchedule?.startScheduleEndDate;
    const startSchedule = new scheduler.CfnSchedule(scope, scheduleName, {
        name: scheduleName,
        description: `created to start model endpoint ${sagemakerEndpoint.endpointName} for ${scheduleName}`,
        flexibleTimeWindow: {
            maximumWindowInMinutes: 5,
            mode: 'FLEXIBLE',
        },
        scheduleExpression: `cron(${scheduleExpression})`,
        scheduleExpressionTimezone: timeZone,
        state: 'ENABLED',
        endDate: enableScheduleEndDate ? `${scheduleEndDate}T00:00:59.000Z` : undefined,
        target: {
            arn: 'arn:aws:scheduler:::aws-sdk:sagemaker:createEndpoint',
            input: JSON.stringify({
                EndpointName: sagemakerEndpoint.endpointName,
                EndpointConfigName: sagemakerEndpoint.endpointConfigName,
            }),
            roleArn: role.roleArn,
        },
    });
    return startSchedule;
}
exports.createStartSchedule = createStartSchedule;
function createStopSchedule(scope, id, sagemakerEndpoint, role, config) {
    const scheduleName = utils_1.Utils.getName(config, `stopSchedule-${sagemakerEndpoint.endpointName}`, 64);
    const scheduleExpression = config.llms?.sagemakerSchedule?.sagemakerCronStopSchedule;
    const timeZone = config.llms?.sagemakerSchedule?.timezonePicker;
    const stopSchedule = new scheduler.CfnSchedule(scope, scheduleName, {
        name: scheduleName,
        description: `created to stop model endpoint ${sagemakerEndpoint.endpointName} for ${scheduleName}`,
        flexibleTimeWindow: {
            maximumWindowInMinutes: 5,
            mode: 'FLEXIBLE',
        },
        scheduleExpression: `cron(${scheduleExpression})`,
        scheduleExpressionTimezone: timeZone,
        state: 'ENABLED',
        target: {
            arn: 'arn:aws:scheduler:::aws-sdk:sagemaker:deleteEndpoint',
            input: JSON.stringify({
                EndpointName: sagemakerEndpoint.endpointName,
            }),
            roleArn: role.roleArn,
        },
    });
    return stopSchedule;
}
exports.createStopSchedule = createStopSchedule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FnZW1ha2VyLXNjaGVkdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2FnZW1ha2VyLXNjaGVkdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVEQUF1RDtBQUl2RCwyQ0FBd0M7QUFLeEMsU0FBZ0IsbUJBQW1CLENBQUMsS0FBZ0IsRUFBRSxFQUFVLEVBQUUsaUJBQXdDLEVBQUUsSUFBYyxFQUFFLE1BQW9CO0lBQzlJLE1BQU0sWUFBWSxHQUFHLGFBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLGlCQUFpQixpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsMEJBQTBCLENBQUM7SUFDdEYsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRSxjQUFjLENBQUM7SUFDaEUsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLHFCQUFxQixDQUFDO0lBQ3BGLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsb0JBQW9CLENBQUM7SUFDN0UsTUFBTSxhQUFhLEdBQUcsSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7UUFDbkUsSUFBSSxFQUFFLFlBQVk7UUFDbEIsV0FBVyxFQUFFLG1DQUFtQyxpQkFBaUIsQ0FBQyxZQUFZLFFBQVEsWUFBWSxFQUFFO1FBQ3BHLGtCQUFrQixFQUFFO1lBQ2xCLHNCQUFzQixFQUFFLENBQUM7WUFDekIsSUFBSSxFQUFFLFVBQVU7U0FDakI7UUFDRCxrQkFBa0IsRUFBRSxRQUFRLGtCQUFrQixHQUFHO1FBQ2pELDBCQUEwQixFQUFFLFFBQVE7UUFDcEMsS0FBSyxFQUFFLFNBQVM7UUFDaEIsT0FBTyxFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxHQUFHLGVBQWUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFNBQVM7UUFDL0UsTUFBTSxFQUFFO1lBQ04sR0FBRyxFQUFFLHNEQUFzRDtZQUMzRCxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDcEIsWUFBWSxFQUFFLGlCQUFpQixDQUFDLFlBQVk7Z0JBQzVDLGtCQUFrQixFQUFFLGlCQUFpQixDQUFDLGtCQUFrQjthQUN6RCxDQUFDO1lBQ0YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3RCO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQztBQTNCRCxrREEyQkM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxLQUFnQixFQUFFLEVBQVUsRUFBRSxpQkFBd0MsRUFBRSxJQUFjLEVBQUUsTUFBb0I7SUFDN0ksTUFBTSxZQUFZLEdBQUcsYUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pHLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRSx5QkFBeUIsQ0FBQztJQUNyRixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLGNBQWMsQ0FBQztJQUNoRSxNQUFNLFlBQVksR0FBRyxJQUFJLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtRQUNsRSxJQUFJLEVBQUUsWUFBWTtRQUNsQixXQUFXLEVBQUUsa0NBQWtDLGlCQUFpQixDQUFDLFlBQVksUUFBUSxZQUFZLEVBQUU7UUFDbkcsa0JBQWtCLEVBQUU7WUFDbEIsc0JBQXNCLEVBQUUsQ0FBQztZQUN6QixJQUFJLEVBQUUsVUFBVTtTQUNqQjtRQUNELGtCQUFrQixFQUFFLFFBQVEsa0JBQWtCLEdBQUc7UUFDakQsMEJBQTBCLEVBQUUsUUFBUTtRQUNwQyxLQUFLLEVBQUUsU0FBUztRQUNoQixNQUFNLEVBQUU7WUFDTixHQUFHLEVBQUUsc0RBQXNEO1lBQzNELEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNwQixZQUFZLEVBQUUsaUJBQWlCLENBQUMsWUFBWTthQUM3QyxDQUFDO1lBQ0YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3RCO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQXZCRCxnREF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgc2NoZWR1bGVyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zY2hlZHVsZXInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgc2FnZW1ha2VyIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtc2FnZW1ha2VyXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4uL3NoYXJlZC91dGlsc1wiO1xuaW1wb3J0IHtcbiAgU3lzdGVtQ29uZmlnLFxufSBmcm9tIFwiLi4vc2hhcmVkL3R5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGFydFNjaGVkdWxlKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHNhZ2VtYWtlckVuZHBvaW50OiBzYWdlbWFrZXIuQ2ZuRW5kcG9pbnQsIHJvbGU6IGlhbS5Sb2xlLCBjb25maWc6IFN5c3RlbUNvbmZpZykge1xuICBjb25zdCBzY2hlZHVsZU5hbWUgPSBVdGlscy5nZXROYW1lKGNvbmZpZywgYHN0YXJ0U2NoZWR1bGUtJHtzYWdlbWFrZXJFbmRwb2ludC5lbmRwb2ludE5hbWV9YCwgNjQpO1xuICBjb25zdCBzY2hlZHVsZUV4cHJlc3Npb24gPSBjb25maWcubGxtcz8uc2FnZW1ha2VyU2NoZWR1bGU/LnNhZ2VtYWtlckNyb25TdGFydFNjaGVkdWxlO1xuICBjb25zdCB0aW1lWm9uZSA9IGNvbmZpZy5sbG1zPy5zYWdlbWFrZXJTY2hlZHVsZT8udGltZXpvbmVQaWNrZXI7XG4gIGNvbnN0IGVuYWJsZVNjaGVkdWxlRW5kRGF0ZSA9IGNvbmZpZy5sbG1zPy5zYWdlbWFrZXJTY2hlZHVsZT8uZW5hYmxlU2NoZWR1bGVFbmREYXRlO1xuICBjb25zdCBzY2hlZHVsZUVuZERhdGUgPSBjb25maWcubGxtcz8uc2FnZW1ha2VyU2NoZWR1bGU/LnN0YXJ0U2NoZWR1bGVFbmREYXRlO1xuICBjb25zdCBzdGFydFNjaGVkdWxlID0gbmV3IHNjaGVkdWxlci5DZm5TY2hlZHVsZShzY29wZSwgc2NoZWR1bGVOYW1lLCB7XG4gICAgbmFtZTogc2NoZWR1bGVOYW1lLFxuICAgIGRlc2NyaXB0aW9uOiBgY3JlYXRlZCB0byBzdGFydCBtb2RlbCBlbmRwb2ludCAke3NhZ2VtYWtlckVuZHBvaW50LmVuZHBvaW50TmFtZX0gZm9yICR7c2NoZWR1bGVOYW1lfWAsXG4gICAgZmxleGlibGVUaW1lV2luZG93OiB7XG4gICAgICBtYXhpbXVtV2luZG93SW5NaW51dGVzOiA1LFxuICAgICAgbW9kZTogJ0ZMRVhJQkxFJyxcbiAgICB9LFxuICAgIHNjaGVkdWxlRXhwcmVzc2lvbjogYGNyb24oJHtzY2hlZHVsZUV4cHJlc3Npb259KWAsXG4gICAgc2NoZWR1bGVFeHByZXNzaW9uVGltZXpvbmU6IHRpbWVab25lLFxuICAgIHN0YXRlOiAnRU5BQkxFRCcsXG4gICAgZW5kRGF0ZTogZW5hYmxlU2NoZWR1bGVFbmREYXRlID8gYCR7c2NoZWR1bGVFbmREYXRlfVQwMDowMDo1OS4wMDBaYCA6IHVuZGVmaW5lZCxcbiAgICB0YXJnZXQ6IHtcbiAgICAgIGFybjogJ2Fybjphd3M6c2NoZWR1bGVyOjo6YXdzLXNkazpzYWdlbWFrZXI6Y3JlYXRlRW5kcG9pbnQnLFxuICAgICAgaW5wdXQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgRW5kcG9pbnROYW1lOiBzYWdlbWFrZXJFbmRwb2ludC5lbmRwb2ludE5hbWUsXG4gICAgICAgIEVuZHBvaW50Q29uZmlnTmFtZTogc2FnZW1ha2VyRW5kcG9pbnQuZW5kcG9pbnRDb25maWdOYW1lLFxuICAgICAgfSksXG4gICAgICByb2xlQXJuOiByb2xlLnJvbGVBcm4sXG4gICAgfSxcbiAgfSk7XG4gIHJldHVybiBzdGFydFNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcFNjaGVkdWxlKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHNhZ2VtYWtlckVuZHBvaW50OiBzYWdlbWFrZXIuQ2ZuRW5kcG9pbnQsIHJvbGU6IGlhbS5Sb2xlLCBjb25maWc6IFN5c3RlbUNvbmZpZykge1xuICBjb25zdCBzY2hlZHVsZU5hbWUgPSBVdGlscy5nZXROYW1lKGNvbmZpZywgYHN0b3BTY2hlZHVsZS0ke3NhZ2VtYWtlckVuZHBvaW50LmVuZHBvaW50TmFtZX1gLCA2NCk7XG4gIGNvbnN0IHNjaGVkdWxlRXhwcmVzc2lvbiA9IGNvbmZpZy5sbG1zPy5zYWdlbWFrZXJTY2hlZHVsZT8uc2FnZW1ha2VyQ3JvblN0b3BTY2hlZHVsZTtcbiAgY29uc3QgdGltZVpvbmUgPSBjb25maWcubGxtcz8uc2FnZW1ha2VyU2NoZWR1bGU/LnRpbWV6b25lUGlja2VyO1xuICBjb25zdCBzdG9wU2NoZWR1bGUgPSBuZXcgc2NoZWR1bGVyLkNmblNjaGVkdWxlKHNjb3BlLCBzY2hlZHVsZU5hbWUsIHtcbiAgICBuYW1lOiBzY2hlZHVsZU5hbWUsXG4gICAgZGVzY3JpcHRpb246IGBjcmVhdGVkIHRvIHN0b3AgbW9kZWwgZW5kcG9pbnQgJHtzYWdlbWFrZXJFbmRwb2ludC5lbmRwb2ludE5hbWV9IGZvciAke3NjaGVkdWxlTmFtZX1gLFxuICAgIGZsZXhpYmxlVGltZVdpbmRvdzoge1xuICAgICAgbWF4aW11bVdpbmRvd0luTWludXRlczogNSxcbiAgICAgIG1vZGU6ICdGTEVYSUJMRScsXG4gICAgfSxcbiAgICBzY2hlZHVsZUV4cHJlc3Npb246IGBjcm9uKCR7c2NoZWR1bGVFeHByZXNzaW9ufSlgLFxuICAgIHNjaGVkdWxlRXhwcmVzc2lvblRpbWV6b25lOiB0aW1lWm9uZSxcbiAgICBzdGF0ZTogJ0VOQUJMRUQnLFxuICAgIHRhcmdldDoge1xuICAgICAgYXJuOiAnYXJuOmF3czpzY2hlZHVsZXI6Ojphd3Mtc2RrOnNhZ2VtYWtlcjpkZWxldGVFbmRwb2ludCcsXG4gICAgICBpbnB1dDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBFbmRwb2ludE5hbWU6IHNhZ2VtYWtlckVuZHBvaW50LmVuZHBvaW50TmFtZSxcbiAgICAgIH0pLFxuICAgICAgcm9sZUFybjogcm9sZS5yb2xlQXJuLFxuICAgIH0sXG4gIH0pO1xuICByZXR1cm4gc3RvcFNjaGVkdWxlO1xufVxuIl19