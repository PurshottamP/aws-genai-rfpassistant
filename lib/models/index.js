"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Models = void 0;
const ssm = require("aws-cdk-lib/aws-ssm");
const constructs_1 = require("constructs");
const iam = require("aws-cdk-lib/aws-iam");
const types_1 = require("../shared/types");
const generative_ai_cdk_constructs_1 = require("@cdklabs/generative-ai-cdk-constructs");
const cdk_nag_1 = require("cdk-nag");
const sagemaker_schedule_1 = require("./sagemaker-schedule");
class Models extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const models = [];
        if (props.config.llms?.sagemaker.includes(types_1.SupportedSageMakerModels.FalconLite)) {
            const FALCON_MODEL_ID = "amazon/FalconLite";
            const FALCON_ENDPOINT_NAME = FALCON_MODEL_ID.split("/")
                .join("-")
                .split(".")
                .join("-");
            const falconLite = new generative_ai_cdk_constructs_1.HuggingFaceSageMakerEndpoint(this, "FalconLite", {
                modelId: FALCON_MODEL_ID,
                vpcConfig: {
                    securityGroupIds: [props.shared.vpc.vpcDefaultSecurityGroup],
                    subnets: props.shared.vpc.privateSubnets.map((subnet) => subnet.subnetId),
                },
                container: generative_ai_cdk_constructs_1.DeepLearningContainerImage.HUGGINGFACE_PYTORCH_TGI_INFERENCE_2_0_1_TGI0_9_3_GPU_PY39_CU118_UBUNTU20_04,
                instanceType: generative_ai_cdk_constructs_1.SageMakerInstanceType.ML_G5_12XLARGE,
                startupHealthCheckTimeoutInSeconds: 600,
                endpointName: FALCON_ENDPOINT_NAME,
                environment: {
                    SM_NUM_GPUS: JSON.stringify(4),
                    MAX_INPUT_LENGTH: JSON.stringify(12000),
                    MAX_TOTAL_TOKENS: JSON.stringify(12001),
                    HF_MODEL_QUANTIZE: "gptq",
                    TRUST_REMOTE_CODE: JSON.stringify(true),
                    MAX_BATCH_PREFILL_TOKENS: JSON.stringify(12001),
                    MAX_BATCH_TOTAL_TOKENS: JSON.stringify(12001),
                    GPTQ_BITS: JSON.stringify(4),
                    GPTQ_GROUPSIZE: JSON.stringify(128),
                    DNTK_ALPHA_SCALER: JSON.stringify(0.25),
                },
            });
            this.suppressCdkNagWarningForEndpointRole(falconLite.role);
            models.push({
                name: FALCON_ENDPOINT_NAME,
                endpoint: falconLite.cfnEndpoint,
                responseStreamingSupported: false,
                inputModalities: [types_1.Modality.Text],
                outputModalities: [types_1.Modality.Text],
                interface: types_1.ModelInterface.LangChain,
                ragSupported: true,
            });
        }
        if (props.config.llms?.sagemaker.includes(types_1.SupportedSageMakerModels.Mistral7b_Instruct)) {
            const MISTRAL_7B_MODEL_ID = "mistralai/Mistral-7B-Instruct-v0.1";
            const MISTRAL_7B_ENDPOINT_NAME = MISTRAL_7B_MODEL_ID.split("/")
                .join("-")
                .split(".")
                .join("-");
            const mistral7B = new generative_ai_cdk_constructs_1.HuggingFaceSageMakerEndpoint(this, "Mistral7BInstruct", {
                modelId: MISTRAL_7B_MODEL_ID,
                vpcConfig: {
                    securityGroupIds: [props.shared.vpc.vpcDefaultSecurityGroup],
                    subnets: props.shared.vpc.privateSubnets.map((subnet) => subnet.subnetId),
                },
                container: generative_ai_cdk_constructs_1.DeepLearningContainerImage.HUGGINGFACE_PYTORCH_TGI_INFERENCE_2_0_1_TGI1_1_0_GPU_PY39_CU118_UBUNTU20_04,
                instanceType: generative_ai_cdk_constructs_1.SageMakerInstanceType.ML_G5_2XLARGE,
                startupHealthCheckTimeoutInSeconds: 300,
                endpointName: MISTRAL_7B_ENDPOINT_NAME,
                environment: {
                    SM_NUM_GPUS: JSON.stringify(1),
                    MAX_INPUT_LENGTH: JSON.stringify(2048),
                    MAX_TOTAL_TOKENS: JSON.stringify(4096),
                },
            });
            this.suppressCdkNagWarningForEndpointRole(mistral7B.role);
            models.push({
                name: MISTRAL_7B_ENDPOINT_NAME,
                endpoint: mistral7B.cfnEndpoint,
                responseStreamingSupported: false,
                inputModalities: [types_1.Modality.Text],
                outputModalities: [types_1.Modality.Text],
                interface: types_1.ModelInterface.LangChain,
                ragSupported: true,
            });
        }
        if (props.config.llms?.sagemaker.includes(types_1.SupportedSageMakerModels.Mistral7b_Instruct2)) {
            const MISTRAL_7B_INSTRUCT2_MODEL_ID = "mistralai/Mistral-7B-Instruct-v0.2";
            const MISTRAL_7B_INSTRUCT2_ENDPOINT_NAME = MISTRAL_7B_INSTRUCT2_MODEL_ID.split("/").join("-").split(".").join("-");
            const mistral7BInstruct2 = new generative_ai_cdk_constructs_1.HuggingFaceSageMakerEndpoint(this, "Mistral7BInstruct2", {
                modelId: MISTRAL_7B_INSTRUCT2_MODEL_ID,
                vpcConfig: {
                    securityGroupIds: [props.shared.vpc.vpcDefaultSecurityGroup],
                    subnets: props.shared.vpc.privateSubnets.map((subnet) => subnet.subnetId),
                },
                container: generative_ai_cdk_constructs_1.DeepLearningContainerImage.fromDeepLearningContainerImage("huggingface-pytorch-tgi-inference", "2.1.1-tgi1.3.3-gpu-py310-cu121-ubuntu20.04"),
                instanceType: generative_ai_cdk_constructs_1.SageMakerInstanceType.ML_G5_2XLARGE,
                startupHealthCheckTimeoutInSeconds: 300,
                endpointName: MISTRAL_7B_INSTRUCT2_ENDPOINT_NAME,
                environment: {
                    SM_NUM_GPUS: JSON.stringify(1),
                    MAX_INPUT_LENGTH: JSON.stringify(2048),
                    MAX_TOTAL_TOKENS: JSON.stringify(4096),
                    MAX_CONCURRENT_REQUESTS: JSON.stringify(4),
                },
            });
            this.suppressCdkNagWarningForEndpointRole(mistral7BInstruct2.role);
            models.push({
                name: MISTRAL_7B_INSTRUCT2_ENDPOINT_NAME,
                endpoint: mistral7BInstruct2.cfnEndpoint,
                responseStreamingSupported: false,
                inputModalities: [types_1.Modality.Text],
                outputModalities: [types_1.Modality.Text],
                interface: types_1.ModelInterface.LangChain,
                ragSupported: true,
            });
        }
        if (props.config.llms?.sagemaker.includes(types_1.SupportedSageMakerModels.Mixtral_8x7b_Instruct)) {
            const MISTRAL_8x7B_MODEL_ID = "mistralai/Mixtral-8x7B-Instruct-v0.1";
            const MISTRAL_8x7B_INSTRUCT2_ENDPOINT_NAME = MISTRAL_8x7B_MODEL_ID.split("/")
                .join("-")
                .split(".")
                .join("-");
            const mistral8x7B = new generative_ai_cdk_constructs_1.HuggingFaceSageMakerEndpoint(this, "Mixtral8x7binstruct", {
                modelId: MISTRAL_8x7B_MODEL_ID,
                vpcConfig: {
                    securityGroupIds: [props.shared.vpc.vpcDefaultSecurityGroup],
                    subnets: props.shared.vpc.privateSubnets.map((subnet) => subnet.subnetId),
                },
                container: generative_ai_cdk_constructs_1.DeepLearningContainerImage.fromDeepLearningContainerImage("huggingface-pytorch-tgi-inference", "2.1.1-tgi1.3.3-gpu-py310-cu121-ubuntu20.04"),
                instanceType: generative_ai_cdk_constructs_1.SageMakerInstanceType.ML_G5_48XLARGE,
                startupHealthCheckTimeoutInSeconds: 300,
                endpointName: MISTRAL_8x7B_INSTRUCT2_ENDPOINT_NAME,
                environment: {
                    SM_NUM_GPUS: JSON.stringify(8),
                    MAX_INPUT_LENGTH: JSON.stringify(24576),
                    MAX_TOTAL_TOKENS: JSON.stringify(32768),
                    MAX_BATCH_PREFILL_TOKENS: JSON.stringify(24576),
                    MAX_CONCURRENT_REQUESTS: JSON.stringify(4),
                },
            });
            this.suppressCdkNagWarningForEndpointRole(mistral8x7B.role);
            models.push({
                name: MISTRAL_8x7B_INSTRUCT2_ENDPOINT_NAME,
                endpoint: mistral8x7B.cfnEndpoint,
                responseStreamingSupported: false,
                inputModalities: [types_1.Modality.Text],
                outputModalities: [types_1.Modality.Text],
                interface: types_1.ModelInterface.LangChain,
                ragSupported: true,
            });
        }
        if (props.config.llms?.sagemaker.includes(types_1.SupportedSageMakerModels.Llama2_13b_Chat)) {
            const LLAMA2_13B_CHAT_ENDPOINT_NAME = "meta-LLama2-13b-chat";
            const llama2_13b_chat = new generative_ai_cdk_constructs_1.JumpStartSageMakerEndpoint(this, "LLamaV2_13B_Chat", {
                model: generative_ai_cdk_constructs_1.JumpStartModel.META_TEXTGENERATION_LLAMA_2_13B_F_2_0_2,
                instanceType: generative_ai_cdk_constructs_1.SageMakerInstanceType.ML_G5_12XLARGE,
                vpcConfig: {
                    securityGroupIds: [props.shared.vpc.vpcDefaultSecurityGroup],
                    subnets: props.shared.vpc.privateSubnets.map((subnet) => subnet.subnetId),
                },
                endpointName: LLAMA2_13B_CHAT_ENDPOINT_NAME,
            });
            this.suppressCdkNagWarningForEndpointRole(llama2_13b_chat.role);
            models.push({
                name: LLAMA2_13B_CHAT_ENDPOINT_NAME,
                endpoint: llama2_13b_chat.cfnEndpoint,
                responseStreamingSupported: false,
                inputModalities: [types_1.Modality.Text],
                outputModalities: [types_1.Modality.Text],
                interface: types_1.ModelInterface.LangChain,
                ragSupported: true,
            });
        }
        if (props.config.llms?.sagemaker.includes(types_1.SupportedSageMakerModels.Idefics_9b)) {
            const IDEFICS_9B_MODEL_ID = "HuggingFaceM4/idefics-9b-instruct";
            const IDEFICS_9B_ENDPOINT_NAME = IDEFICS_9B_MODEL_ID.split("/")
                .join("-")
                .split(".")
                .join("-");
            const idefics9b = new generative_ai_cdk_constructs_1.HuggingFaceSageMakerEndpoint(this, "IDEFICS9B", {
                modelId: IDEFICS_9B_MODEL_ID,
                vpcConfig: {
                    securityGroupIds: [props.shared.vpc.vpcDefaultSecurityGroup],
                    subnets: props.shared.vpc.privateSubnets.map((subnet) => subnet.subnetId),
                },
                container: generative_ai_cdk_constructs_1.DeepLearningContainerImage.HUGGINGFACE_PYTORCH_TGI_INFERENCE_2_0_1_TGI1_1_0_GPU_PY39_CU118_UBUNTU20_04,
                instanceType: generative_ai_cdk_constructs_1.SageMakerInstanceType.ML_G5_12XLARGE,
                startupHealthCheckTimeoutInSeconds: 300,
                endpointName: IDEFICS_9B_ENDPOINT_NAME,
                environment: {
                    SM_NUM_GPUS: JSON.stringify(4),
                    MAX_INPUT_LENGTH: JSON.stringify(1024),
                    MAX_TOTAL_TOKENS: JSON.stringify(2048),
                    MAX_BATCH_TOTAL_TOKENS: JSON.stringify(8192),
                },
            });
            this.suppressCdkNagWarningForEndpointRole(idefics9b.role);
            models.push({
                name: IDEFICS_9B_ENDPOINT_NAME,
                endpoint: idefics9b.cfnEndpoint,
                responseStreamingSupported: false,
                inputModalities: [types_1.Modality.Text, types_1.Modality.Image],
                outputModalities: [types_1.Modality.Text],
                interface: types_1.ModelInterface.MultiModal,
                ragSupported: false,
            });
        }
        if (props.config.llms?.sagemaker.includes(types_1.SupportedSageMakerModels.Idefics_80b)) {
            const IDEFICS_80B_MODEL_ID = "HuggingFaceM4/idefics-80b-instruct";
            const IDEFICS_80B_ENDPOINT_NAME = IDEFICS_80B_MODEL_ID.split("/")
                .join("-")
                .split(".")
                .join("-");
            const idefics80b = new generative_ai_cdk_constructs_1.HuggingFaceSageMakerEndpoint(this, "IDEFICS80B", {
                modelId: IDEFICS_80B_MODEL_ID,
                vpcConfig: {
                    securityGroupIds: [props.shared.vpc.vpcDefaultSecurityGroup],
                    subnets: props.shared.vpc.privateSubnets.map((subnet) => subnet.subnetId),
                },
                container: generative_ai_cdk_constructs_1.DeepLearningContainerImage.HUGGINGFACE_PYTORCH_TGI_INFERENCE_2_0_1_TGI1_1_0_GPU_PY39_CU118_UBUNTU20_04,
                instanceType: generative_ai_cdk_constructs_1.SageMakerInstanceType.ML_G5_48XLARGE,
                startupHealthCheckTimeoutInSeconds: 600,
                endpointName: IDEFICS_80B_ENDPOINT_NAME,
                environment: {
                    SM_NUM_GPUS: JSON.stringify(8),
                    MAX_INPUT_LENGTH: JSON.stringify(1024),
                    MAX_TOTAL_TOKENS: JSON.stringify(2048),
                    MAX_BATCH_TOTAL_TOKENS: JSON.stringify(8192),
                    // quantization required to work with ml.g5.48xlarge
                    // comment if deploying with ml.p4d or ml.p4e instances
                    HF_MODEL_QUANTIZE: "bitsandbytes",
                },
            });
            this.suppressCdkNagWarningForEndpointRole(idefics80b.role);
            models.push({
                name: IDEFICS_80B_ENDPOINT_NAME,
                endpoint: idefics80b.cfnEndpoint,
                responseStreamingSupported: false,
                inputModalities: [types_1.Modality.Text, types_1.Modality.Image],
                outputModalities: [types_1.Modality.Text],
                interface: types_1.ModelInterface.MultiModal,
                ragSupported: false,
            });
        }
        const modelsParameter = new ssm.StringParameter(this, "ModelsParameter", {
            stringValue: JSON.stringify(models.map((model) => ({
                name: model.name,
                endpoint: model.endpoint.endpointName,
                responseStreamingSupported: model.responseStreamingSupported,
                inputModalities: model.inputModalities,
                outputModalities: model.outputModalities,
                interface: model.interface,
                ragSupported: model.ragSupported,
            }))),
        });
        this.models = models;
        this.modelsParameter = modelsParameter;
        if (models.length > 0 && props.config.llms?.sagemakerSchedule?.enabled) {
            let schedulerRole = new iam.Role(this, 'SchedulerRole', {
                assumedBy: new iam.ServicePrincipal('scheduler.amazonaws.com'),
                description: 'Role for Scheduler to interact with SageMaker',
            });
            schedulerRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSageMakerFullAccess'));
            this.suppressCdkNagWarningForEndpointRole(schedulerRole);
            models.forEach((model) => {
                sagemaker_schedule_1.createStartSchedule(this, id, model.endpoint, schedulerRole, props.config);
                sagemaker_schedule_1.createStopSchedule(this, id, model.endpoint, schedulerRole, props.config);
            });
        }
    }
    suppressCdkNagWarningForEndpointRole(role) {
        cdk_nag_1.NagSuppressions.addResourceSuppressions(role, [
            {
                id: "AwsSolutions-IAM4",
                reason: "Gives user ability to deploy and delete endpoints from the UI.",
            },
            {
                id: "AwsSolutions-IAM5",
                reason: "Gives user ability to deploy and delete endpoints from the UI.",
            },
        ], true);
    }
}
exports.Models = Models;
//# sourceMappingURL=data:application/json;base64,