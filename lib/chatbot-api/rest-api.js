"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiResolvers = void 0;
const path = require("path");
const cdk = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const graphql_1 = require("graphql");
const fs_1 = require("fs");
class ApiResolvers extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const apiSecurityGroup = new ec2.SecurityGroup(this, "ApiSecurityGroup", {
            vpc: props.shared.vpc,
        });
        const appSyncLambdaResolver = new lambda.Function(this, "GraphQLApiHandler", {
            code: props.shared.sharedCode.bundleWithLambdaAsset(path.join(__dirname, "./functions/api-handler")),
            handler: "index.handler",
            runtime: props.shared.pythonRuntime,
            architecture: props.shared.lambdaArchitecture,
            timeout: cdk.Duration.minutes(10),
            memorySize: 512,
            tracing: lambda.Tracing.ACTIVE,
            logRetention: logs.RetentionDays.ONE_WEEK,
            layers: [props.shared.powerToolsLayer, props.shared.commonLayer],
            vpc: props.shared.vpc,
            securityGroups: [apiSecurityGroup],
            vpcSubnets: props.shared.vpc.privateSubnets,
            environment: {
                ...props.shared.defaultEnvironmentVariables,
                CONFIG_PARAMETER_NAME: props.shared.configParameter.parameterName,
                MODELS_PARAMETER_NAME: props.modelsParameter.parameterName,
                X_ORIGIN_VERIFY_SECRET_ARN: props.shared.xOriginVerifySecret.secretArn,
                API_KEYS_SECRETS_ARN: props.shared.apiKeysSecret.secretArn,
                SESSIONS_TABLE_NAME: props.sessionsTable.tableName,
                QUESTIONS_TABLE_NAME: props.questionsTable.tableName,
                QUESTIONS_BY_SESSION_INDEX_NAME: props.bySessionIdIndex,
                USER_FEEDBACK_BUCKET_NAME: props.userFeedbackBucket?.bucketName ?? "",
                CHATBOT_FILES_BUCKET_NAME: props.filesBucket.bucketName,
                UPLOAD_BUCKET_NAME: props.ragEngines?.uploadBucket?.bucketName ?? "",
                PROCESSING_BUCKET_NAME: props.ragEngines?.processingBucket?.bucketName ?? "",
                AURORA_DB_SECRET_ID: props.ragEngines?.auroraPgVector?.database
                    ?.secret?.secretArn,
                WORKSPACES_TABLE_NAME: props.ragEngines?.workspacesTable.tableName ?? "",
                WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME: props.ragEngines?.workspacesByObjectTypeIndexName ?? "",
                DOCUMENTS_TABLE_NAME: props.ragEngines?.documentsTable.tableName ?? "",
                DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME: props.ragEngines?.documentsByCompountKeyIndexName ?? "",
                DOCUMENTS_BY_STATUS_INDEX: props.ragEngines?.documentsByStatusIndexName ?? "",
                SAGEMAKER_RAG_MODELS_ENDPOINT: props.ragEngines?.sageMakerRagModels?.model.endpoint
                    ?.attrEndpointName ?? "",
                DELETE_WORKSPACE_WORKFLOW_ARN: props.ragEngines?.deleteWorkspaceWorkflow?.stateMachineArn ?? "",
                CREATE_AURORA_WORKSPACE_WORKFLOW_ARN: props.ragEngines?.auroraPgVector?.createAuroraWorkspaceWorkflow
                    ?.stateMachineArn ?? "",
                CREATE_OPEN_SEARCH_WORKSPACE_WORKFLOW_ARN: props.ragEngines?.openSearchVector
                    ?.createOpenSearchWorkspaceWorkflow?.stateMachineArn ?? "",
                CREATE_KENDRA_WORKSPACE_WORKFLOW_ARN: props.ragEngines?.kendraRetrieval?.createKendraWorkspaceWorkflow
                    ?.stateMachineArn ?? "",
                FILE_IMPORT_WORKFLOW_ARN: props.ragEngines?.fileImportWorkflow?.stateMachineArn ?? "",
                WEBSITE_CRAWLING_WORKFLOW_ARN: props.ragEngines?.websiteCrawlingWorkflow?.stateMachineArn ?? "",
                OPEN_SEARCH_COLLECTION_ENDPOINT: props.ragEngines?.openSearchVector?.openSearchCollectionEndpoint ??
                    "",
                DEFAULT_KENDRA_INDEX_ID: props.ragEngines?.kendraRetrieval?.kendraIndex?.attrId ?? "",
                DEFAULT_KENDRA_INDEX_NAME: props.ragEngines?.kendraRetrieval?.kendraIndex?.name ?? "",
                DEFAULT_KENDRA_S3_DATA_SOURCE_ID: props.ragEngines?.kendraRetrieval?.kendraS3DataSource?.attrId ?? "",
                DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME: props.ragEngines?.kendraRetrieval?.kendraS3DataSourceBucket
                    ?.bucketName ?? "",
                RSS_FEED_INGESTOR_FUNCTION: props.ragEngines?.dataImport.rssIngestorFunction?.functionArn ?? "",
            },
        });
        function addPermissions(apiHandler) {
            if (props.ragEngines?.workspacesTable) {
                props.ragEngines.workspacesTable.grantReadWriteData(apiHandler);
            }
            if (props.ragEngines?.documentsTable) {
                props.ragEngines.documentsTable.grantReadWriteData(apiHandler);
                props.ragEngines?.dataImport.rssIngestorFunction?.grantInvoke(apiHandler);
            }
            if (props.ragEngines?.auroraPgVector) {
                props.ragEngines.auroraPgVector.database.secret?.grantRead(apiHandler);
                props.ragEngines.auroraPgVector.database.connections.allowDefaultPortFrom(apiHandler);
                props.ragEngines.auroraPgVector.createAuroraWorkspaceWorkflow.grantStartExecution(apiHandler);
            }
            if (props.ragEngines?.openSearchVector) {
                apiHandler.addToRolePolicy(new iam.PolicyStatement({
                    actions: ["aoss:APIAccessAll"],
                    resources: [
                        props.ragEngines?.openSearchVector.openSearchCollection.attrArn,
                    ],
                }));
                props.ragEngines.openSearchVector.createOpenSearchWorkspaceWorkflow.grantStartExecution(apiHandler);
            }
            if (props.ragEngines?.kendraRetrieval) {
                props.ragEngines.kendraRetrieval.createKendraWorkspaceWorkflow.grantStartExecution(apiHandler);
                props.ragEngines?.kendraRetrieval?.kendraS3DataSourceBucket?.grantReadWrite(apiHandler);
                if (props.ragEngines.kendraRetrieval.kendraIndex) {
                    apiHandler.addToRolePolicy(new iam.PolicyStatement({
                        actions: [
                            "kendra:Retrieve",
                            "kendra:Query",
                            "kendra:BatchDeleteDocument",
                            "kendra:BatchPutDocument",
                            "kendra:StartDataSourceSyncJob",
                            "kendra:DescribeDataSourceSyncJob",
                            "kendra:StopDataSourceSyncJob",
                            "kendra:ListDataSourceSyncJobs",
                            "kendra:ListDataSources",
                            "kendra:DescribeIndex",
                        ],
                        resources: [
                            props.ragEngines.kendraRetrieval.kendraIndex.attrArn,
                            `${props.ragEngines.kendraRetrieval.kendraIndex.attrArn}/*`,
                        ],
                    }));
                }
                for (const item of props.config.rag.engines.kendra.external ?? []) {
                    if (item.roleArn) {
                        apiHandler.addToRolePolicy(new iam.PolicyStatement({
                            actions: ["sts:AssumeRole"],
                            resources: [item.roleArn],
                        }));
                    }
                    else {
                        apiHandler.addToRolePolicy(new iam.PolicyStatement({
                            actions: ["kendra:Retrieve", "kendra:Query"],
                            resources: [
                                `arn:${cdk.Aws.PARTITION}:kendra:${item.region ?? cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:index/${item.kendraId}`,
                            ],
                        }));
                    }
                }
            }
            if (props.ragEngines?.fileImportWorkflow) {
                props.ragEngines.fileImportWorkflow.grantStartExecution(apiHandler);
            }
            if (props.ragEngines?.websiteCrawlingWorkflow) {
                props.ragEngines.websiteCrawlingWorkflow.grantStartExecution(apiHandler);
            }
            if (props.ragEngines?.deleteWorkspaceWorkflow) {
                props.ragEngines.deleteWorkspaceWorkflow.grantStartExecution(apiHandler);
            }
            if (props.ragEngines?.sageMakerRagModels) {
                apiHandler.addToRolePolicy(new iam.PolicyStatement({
                    actions: ["sagemaker:InvokeEndpoint"],
                    resources: [props.ragEngines.sageMakerRagModels.model.endpoint.ref],
                }));
            }
            for (const model of props.models) {
                apiHandler.addToRolePolicy(new iam.PolicyStatement({
                    actions: ["sagemaker:InvokeEndpoint"],
                    resources: [model.endpoint.ref],
                }));
            }
            apiHandler.addToRolePolicy(new iam.PolicyStatement({
                actions: [
                    "comprehend:DetectDominantLanguage",
                    "comprehend:DetectSentiment",
                ],
                resources: ["*"],
            }));
            props.shared.xOriginVerifySecret.grantRead(apiHandler);
            props.shared.apiKeysSecret.grantRead(apiHandler);
            props.shared.configParameter.grantRead(apiHandler);
            props.modelsParameter.grantRead(apiHandler);
            props.sessionsTable.grantReadWriteData(apiHandler);
            props.questionsTable.grantReadWriteData(apiHandler);
            props.filesBucket.grantReadWrite(apiHandler);
            props.userFeedbackBucket.grantReadWrite(apiHandler);
            props.ragEngines?.uploadBucket.grantReadWrite(apiHandler);
            props.ragEngines?.processingBucket.grantReadWrite(apiHandler);
            if (props.config.bedrock?.enabled) {
                apiHandler.addToRolePolicy(new iam.PolicyStatement({
                    actions: [
                        "bedrock:ListFoundationModels",
                        "bedrock:ListCustomModels",
                        "bedrock:InvokeModel",
                        "bedrock:InvokeModelWithResponseStream",
                    ],
                    resources: ["*"],
                }));
                if (props.config.bedrock?.roleArn) {
                    apiHandler.addToRolePolicy(new iam.PolicyStatement({
                        actions: ["sts:AssumeRole"],
                        resources: [props.config.bedrock.roleArn],
                    }));
                }
            }
        }
        addPermissions(appSyncLambdaResolver);
        props.ragEngines?.openSearchVector?.addToAccessPolicy("graphql-api", [appSyncLambdaResolver.role?.roleArn], ["aoss:DescribeIndex", "aoss:ReadDocument", "aoss:WriteDocument"]);
        const functionDataSource = props.api.addLambdaDataSource("proxyResolverFunction", appSyncLambdaResolver);
        const schema = graphql_1.parse(fs_1.readFileSync("lib/chatbot-api/schema/schema.graphql", "utf8"));
        function addResolvers(operationType) {
            const fieldNames = schema.definitions
                .filter((x) => x.kind == "ObjectTypeDefinition")
                .filter((y) => y.name.value == operationType)[0].fields.map((z) => z.name.value);
            for (const fieldName of fieldNames) {
                // These resolvers are added by the Realtime API
                if (fieldName == "sendQuery" || fieldName == "publishResponse") {
                    continue;
                }
                props.api.createResolver(`${fieldName}-resolver`, {
                    typeName: operationType,
                    fieldName: fieldName,
                    dataSource: functionDataSource,
                });
            }
        }
        addResolvers("Query");
        addResolvers("Mutation");
    }
}
exports.ApiResolvers = ApiResolvers;
//# sourceMappingURL=data:application/json;base64,