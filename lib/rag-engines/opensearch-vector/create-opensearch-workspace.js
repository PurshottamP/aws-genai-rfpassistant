"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateOpenSearchWorkspace = void 0;
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const tasks = require("aws-cdk-lib/aws-stepfunctions-tasks");
const constructs_1 = require("constructs");
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class CreateOpenSearchWorkspace extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const createFunction = new lambda.Function(this, "CreateOpenSearchWorkspaceFunction", {
            vpc: props.shared.vpc,
            code: props.shared.sharedCode.bundleWithLambdaAsset(path.join(__dirname, "./functions/create-workflow/create")),
            runtime: props.shared.pythonRuntime,
            architecture: props.shared.lambdaArchitecture,
            handler: "index.lambda_handler",
            layers: [props.shared.powerToolsLayer, props.shared.commonLayer],
            timeout: cdk.Duration.minutes(5),
            logRetention: logs.RetentionDays.ONE_WEEK,
            environment: {
                ...props.shared.defaultEnvironmentVariables,
                WORKSPACES_TABLE_NAME: props.ragDynamoDBTables.workspacesTable.tableName,
                WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME: props.ragDynamoDBTables.workspacesByObjectTypeIndexName,
                OPEN_SEARCH_COLLECTION_NAME: props.openSearchCollectionName,
                OPEN_SEARCH_COLLECTION_ENDPOINT: props.collectionEndpoint,
                OPEN_SEARCH_COLLECTION_ENDPOINT_PORT: "443",
            },
        });
        props.ragDynamoDBTables.workspacesTable.grantReadWriteData(createFunction);
        createFunction.addToRolePolicy(new iam.PolicyStatement({
            actions: [
                "aoss:APIAccessAll",
                "aoss:DescribeIndex",
                "aoss:CreateIndex",
            ],
            resources: [props.openSearchCollection.attrArn],
        }));
        const handleError = new tasks.DynamoUpdateItem(this, "HandleError", {
            table: props.ragDynamoDBTables.workspacesTable,
            key: {
                workspace_id: tasks.DynamoAttributeValue.fromString(sfn.JsonPath.stringAt("$.workspace_id")),
                object_type: tasks.DynamoAttributeValue.fromString("workspace"),
            },
            updateExpression: "set #status = :error",
            expressionAttributeNames: {
                "#status": "status",
            },
            expressionAttributeValues: {
                ":error": tasks.DynamoAttributeValue.fromString("error"),
            },
        }).next(new sfn.Fail(this, "Fail", {
            cause: "Workspace creation failed",
        }));
        const setCreating = new tasks.DynamoUpdateItem(this, "SetCreating", {
            table: props.ragDynamoDBTables.workspacesTable,
            key: {
                workspace_id: tasks.DynamoAttributeValue.fromString(sfn.JsonPath.stringAt("$.workspace_id")),
                object_type: tasks.DynamoAttributeValue.fromString("workspace"),
            },
            updateExpression: "set #status=:statusValue",
            expressionAttributeNames: {
                "#status": "status",
            },
            expressionAttributeValues: {
                ":statusValue": tasks.DynamoAttributeValue.fromString("creating"),
            },
            resultPath: sfn.JsonPath.DISCARD,
        });
        const setReady = new tasks.DynamoUpdateItem(this, "SetReady", {
            table: props.ragDynamoDBTables.workspacesTable,
            key: {
                workspace_id: tasks.DynamoAttributeValue.fromString(sfn.JsonPath.stringAt("$.workspace_id")),
                object_type: tasks.DynamoAttributeValue.fromString("workspace"),
            },
            updateExpression: "set #status=:statusValue",
            expressionAttributeNames: {
                "#status": "status",
            },
            expressionAttributeValues: {
                ":statusValue": tasks.DynamoAttributeValue.fromString("ready"),
            },
            resultPath: sfn.JsonPath.DISCARD,
        });
        const createTask = new tasks.LambdaInvoke(this, "Create", {
            lambdaFunction: createFunction,
            resultPath: "$.createResult",
        }).addCatch(handleError, {
            errors: ["States.ALL"],
            resultPath: "$.createResult",
        });
        const workflow = setCreating
            .next(createTask)
            .next(setReady)
            .next(new sfn.Succeed(this, "Success"));
        const logGroup = new logs.LogGroup(this, "CreateOpenSearchWorkspaceSMLogGroup", {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
        });
        const stateMachine = new sfn.StateMachine(this, "CreateOpenSearchWorkspace", {
            definitionBody: sfn.DefinitionBody.fromChainable(workflow),
            timeout: cdk.Duration.minutes(5),
            comment: "Create OpenSearch Workspace Workflow",
            tracingEnabled: true,
            logs: {
                destination: logGroup,
                level: sfn.LogLevel.ALL,
            },
        });
        this.stateMachine = stateMachine;
        this.createWorkspaceRole = createFunction.role;
    }
}
exports.CreateOpenSearchWorkspace = CreateOpenSearchWorkspace;
//# sourceMappingURL=data:application/json;base64,