"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileImportBatchJob = void 0;
const cdk = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const batch = require("aws-cdk-lib/aws-batch");
const ecs = require("aws-cdk-lib/aws-ecs");
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_ecr_assets = require("aws-cdk-lib/aws-ecr-assets");
const iam = require("aws-cdk-lib/aws-iam");
const cdk_nag_1 = require("cdk-nag");
class FileImportBatchJob extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const computeEnvironment = new batch.ManagedEc2EcsComputeEnvironment(this, "ManagedEc2EcsComputeEnvironment", {
            vpc: props.shared.vpc,
            instanceTypes: [
                ec2.InstanceType.of(ec2.InstanceClass.M6A, ec2.InstanceSize.LARGE),
            ],
            maxvCpus: 4,
            minvCpus: 0,
            replaceComputeEnvironment: true,
            updateTimeout: cdk.Duration.minutes(30),
            updateToLatestImageVersion: true,
        });
        const jobQueue = new batch.JobQueue(this, "JobQueue", {
            computeEnvironments: [
                {
                    computeEnvironment,
                    order: 1,
                },
            ],
            priority: 1,
        });
        const fileImportJobRole = new iam.Role(this, "FileImportJobRole", {
            assumedBy: new iam.ServicePrincipal("ecs-tasks.amazonaws.com"),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AmazonECSTaskExecutionRolePolicy"),
            ],
        });
        const fileImportContainer = new batch.EcsEc2ContainerDefinition(this, "FileImportContainer", {
            cpu: 2,
            memory: cdk.Size.mebibytes(2048),
            image: ecs.ContainerImage.fromAsset("lib/shared", {
                platform: aws_ecr_assets.Platform.LINUX_AMD64,
                file: "file-import-dockerfile",
            }),
            jobRole: fileImportJobRole,
            environment: {
                AWS_DEFAULT_REGION: cdk.Stack.of(this).region,
                CONFIG_PARAMETER_NAME: props.shared.configParameter.parameterName,
                API_KEYS_SECRETS_ARN: props.shared.apiKeysSecret.secretArn,
                AURORA_DB_SECRET_ID: props.auroraDatabase?.secret
                    ?.secretArn,
                PROCESSING_BUCKET_NAME: props.processingBucket.bucketName,
                WORKSPACES_TABLE_NAME: props.ragDynamoDBTables.workspacesTable.tableName,
                WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME: props.ragDynamoDBTables.workspacesByObjectTypeIndexName,
                DOCUMENTS_TABLE_NAME: props.ragDynamoDBTables.documentsTable.tableName ?? "",
                DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME: props.ragDynamoDBTables.documentsByCompoundKeyIndexName ?? "",
                SAGEMAKER_RAG_MODELS_ENDPOINT: props.sageMakerRagModelsEndpoint?.attrEndpointName ?? "",
                OPEN_SEARCH_COLLECTION_ENDPOINT: props.openSearchVector?.openSearchCollectionEndpoint ?? "",
            },
        });
        const fileImportJob = new batch.EcsJobDefinition(this, "FileImportJob", {
            container: fileImportContainer,
            timeout: cdk.Duration.minutes(30),
            retryAttempts: 3,
            retryStrategies: [
                batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.CANNOT_PULL_CONTAINER),
                batch.RetryStrategy.of(batch.Action.EXIT, batch.Reason.custom({
                    onExitCode: "137",
                })),
            ],
        });
        props.uploadBucket.grantReadWrite(fileImportJobRole);
        props.processingBucket.grantReadWrite(fileImportJobRole);
        props.shared.configParameter.grantRead(fileImportJobRole);
        props.shared.apiKeysSecret.grantRead(fileImportJobRole);
        props.ragDynamoDBTables.workspacesTable.grantReadWriteData(fileImportJobRole);
        props.ragDynamoDBTables.documentsTable.grantReadWriteData(fileImportJobRole);
        if (props.auroraDatabase) {
            props.auroraDatabase.secret?.grantRead(fileImportJobRole);
            props.auroraDatabase.connections.allowDefaultPortFrom(computeEnvironment);
        }
        if (props.openSearchVector) {
            fileImportJobRole.addToPolicy(new iam.PolicyStatement({
                actions: ["aoss:APIAccessAll"],
                resources: [props.openSearchVector.openSearchCollection.attrArn],
            }));
            props.openSearchVector.addToAccessPolicy("file-import-job", [fileImportJobRole.roleArn], ["aoss:DescribeIndex", "aoss:ReadDocument", "aoss:WriteDocument"]);
            props.openSearchVector.createOpenSearchWorkspaceWorkflow.grantStartExecution(fileImportJobRole);
        }
        if (props.sageMakerRagModelsEndpoint) {
            fileImportJobRole.addToPolicy(new iam.PolicyStatement({
                actions: ["sagemaker:InvokeEndpoint"],
                resources: [props.sageMakerRagModelsEndpoint.ref],
            }));
        }
        if (props.config.bedrock?.enabled) {
            fileImportJobRole.addToPolicy(new iam.PolicyStatement({
                actions: [
                    "bedrock:InvokeModel",
                    "bedrock:InvokeModelWithResponseStream",
                ],
                resources: ["arn:aws:bedrock:*"],
            }));
            if (props.config.bedrock?.roleArn) {
                fileImportJobRole.addToPolicy(new iam.PolicyStatement({
                    actions: ["sts:AssumeRole"],
                    resources: [props.config.bedrock.roleArn],
                }));
            }
        }
        this.jobQueue = jobQueue;
        this.fileImportJob = fileImportJob;
        /**
         * CDK NAG suppression
         */
        cdk_nag_1.NagSuppressions.addResourceSuppressions(fileImportJobRole, [
            {
                id: "AwsSolutions-IAM4",
                reason: "Allow user freedom of model usage in Bedrock.",
            },
            {
                id: "AwsSolutions-IAM5",
                reason: "Access to all log groups required for CloudWatch log group creation.",
            },
            {
                id: "AwsSolutions-IAM5",
                reason: "S3 write access required for upload and processing buckets.",
            },
        ]);
    }
}
exports.FileImportBatchJob = FileImportBatchJob;
//# sourceMappingURL=data:application/json;base64,