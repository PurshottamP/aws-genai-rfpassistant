"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RssSubscription = void 0;
const constructs_1 = require("constructs");
const path = require("path");
const cdk = require("aws-cdk-lib");
const logs = require("aws-cdk-lib/aws-logs");
const lambda = require("aws-cdk-lib/aws-lambda");
const events = require("aws-cdk-lib/aws-events");
const targets = require("aws-cdk-lib/aws-events-targets");
class RssSubscription extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const rssIngestorFunction = new lambda.Function(this, "RssIngestor", {
            code: props.shared.sharedCode.bundleWithLambdaAsset(path.join(__dirname, "./functions/rss-ingestor")),
            description: "Retrieves the latest data from the RSS Feed and adds any newly found posts to be queued for Website Crawling",
            architecture: props.shared.lambdaArchitecture,
            runtime: props.shared.pythonRuntime,
            tracing: lambda.Tracing.ACTIVE,
            memorySize: 1024,
            handler: "index.lambda_handler",
            layers: [props.shared.powerToolsLayer, props.shared.commonLayer],
            timeout: cdk.Duration.minutes(15),
            logRetention: logs.RetentionDays.ONE_WEEK,
            environment: {
                ...props.shared.defaultEnvironmentVariables,
                CONFIG_PARAMETER_NAME: props.shared.configParameter.parameterName,
                WORKSPACES_TABLE_NAME: props.ragDynamoDBTables.workspacesTable.tableName,
                WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME: props.ragDynamoDBTables.workspacesByObjectTypeIndexName,
                DOCUMENTS_TABLE_NAME: props.ragDynamoDBTables.documentsTable.tableName ?? "",
                DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME: props.ragDynamoDBTables.documentsByCompoundKeyIndexName ?? "",
                DOCUMENTS_BY_STATUS_INDEX: props.ragDynamoDBTables.documentsByStatusIndexName ?? "",
            },
        });
        props.shared.configParameter.grantRead(rssIngestorFunction);
        props.ragDynamoDBTables.documentsTable.grantReadWriteData(rssIngestorFunction);
        props.ragDynamoDBTables.workspacesTable.grantReadData(rssIngestorFunction);
        const triggerRssIngestorsFunction = new lambda.Function(this, "triggerRssIngestorsFunction", {
            code: props.shared.sharedCode.bundleWithLambdaAsset(path.join(__dirname, "./functions/trigger-rss-ingestors")),
            description: "Invokes RSS Feed Ingestors for each Subscribed RSS Feed",
            architecture: props.shared.lambdaArchitecture,
            runtime: props.shared.pythonRuntime,
            tracing: lambda.Tracing.ACTIVE,
            memorySize: 1024,
            handler: "index.lambda_handler",
            layers: [props.shared.powerToolsLayer, props.shared.commonLayer],
            timeout: cdk.Duration.seconds(15),
            logRetention: logs.RetentionDays.ONE_WEEK,
            environment: {
                ...props.shared.defaultEnvironmentVariables,
                CONFIG_PARAMETER_NAME: props.shared.configParameter.parameterName,
                WORKSPACES_TABLE_NAME: props.ragDynamoDBTables.workspacesTable.tableName,
                WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME: props.ragDynamoDBTables.workspacesByObjectTypeIndexName,
                DOCUMENTS_TABLE_NAME: props.ragDynamoDBTables.documentsTable.tableName ?? "",
                DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME: props.ragDynamoDBTables.documentsByCompoundKeyIndexName ?? "",
                DOCUMENTS_BY_STATUS_INDEX: props.ragDynamoDBTables.documentsByStatusIndexName ?? "",
                PROCESSING_BUCKET_NAME: props.processingBucket.bucketName,
                RSS_FEED_INGESTOR_FUNCTION: rssIngestorFunction.functionName,
            },
        });
        rssIngestorFunction.grantInvoke(triggerRssIngestorsFunction);
        props.shared.configParameter.grantRead(triggerRssIngestorsFunction);
        props.ragDynamoDBTables.documentsTable.grantReadData(triggerRssIngestorsFunction);
        new events.Rule(this, "triggerRssIngestorsFunctionSchedule", {
            schedule: events.Schedule.rate(cdk.Duration.minutes(15)),
            targets: [new targets.LambdaFunction(triggerRssIngestorsFunction)],
        });
        const crawlQueuedRssPostsFunction = new lambda.Function(this, "crawlQueuedRssPostsFunction", {
            vpc: props.shared.vpc,
            description: "Functions polls the RSS items for pending urls and invokes Website crawler inference. Max of 10 URLs per invoke.",
            code: props.shared.sharedCode.bundleWithLambdaAsset(path.join(__dirname, "./functions/batch-crawl-rss-posts")),
            architecture: props.shared.lambdaArchitecture,
            runtime: props.shared.pythonRuntime,
            tracing: lambda.Tracing.ACTIVE,
            memorySize: 1024,
            handler: "index.lambda_handler",
            layers: [props.shared.powerToolsLayer, props.shared.commonLayer],
            timeout: cdk.Duration.minutes(5),
            environment: {
                ...props.shared.defaultEnvironmentVariables,
                CONFIG_PARAMETER_NAME: props.shared.configParameter.parameterName,
                WORKSPACES_TABLE_NAME: props.ragDynamoDBTables.workspacesTable.tableName,
                WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME: props.ragDynamoDBTables.workspacesByObjectTypeIndexName,
                DOCUMENTS_TABLE_NAME: props.ragDynamoDBTables.documentsTable.tableName ?? "",
                DOCUMENTS_BY_COMPOUND_KEY_INDEX_NAME: props.ragDynamoDBTables.documentsByCompoundKeyIndexName ?? "",
                DOCUMENTS_BY_STATUS_INDEX: props.ragDynamoDBTables.documentsByStatusIndexName ?? "",
                WEBSITE_CRAWLING_WORKFLOW_ARN: props.websiteCrawlerStateMachine.stateMachineArn,
                PROCESSING_BUCKET_NAME: props.processingBucket.bucketName,
            },
        });
        props.processingBucket.grantReadWrite(crawlQueuedRssPostsFunction);
        props.websiteCrawlerStateMachine.grantStartExecution(crawlQueuedRssPostsFunction);
        new events.Rule(this, "CrawlQueuedRssPostsScheduleRule", {
            schedule: events.Schedule.rate(cdk.Duration.minutes(10)),
            targets: [new targets.LambdaFunction(crawlQueuedRssPostsFunction)],
        });
        props.shared.configParameter.grantRead(crawlQueuedRssPostsFunction);
        props.ragDynamoDBTables.documentsTable.grantReadWriteData(crawlQueuedRssPostsFunction);
        props.ragDynamoDBTables.workspacesTable.grantReadWriteData(crawlQueuedRssPostsFunction);
    }
}
exports.RssSubscription = RssSubscription;
//# sourceMappingURL=data:application/json;base64,