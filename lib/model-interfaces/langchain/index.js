"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LangChainInterface = void 0;
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const lambdaEventSources = require("aws-cdk-lib/aws-lambda-event-sources");
const logs = require("aws-cdk-lib/aws-logs");
const sqs = require("aws-cdk-lib/aws-sqs");
const constructs_1 = require("constructs");
const path = require("path");
class LangChainInterface extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const requestHandler = new lambda.Function(this, "RequestHandler", {
            vpc: props.shared.vpc,
            code: props.shared.sharedCode.bundleWithLambdaAsset(path.join(__dirname, "./functions/request-handler")),
            handler: "index.handler",
            runtime: props.shared.pythonRuntime,
            architecture: props.shared.lambdaArchitecture,
            tracing: lambda.Tracing.ACTIVE,
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
            logRetention: logs.RetentionDays.ONE_WEEK,
            layers: [props.shared.powerToolsLayer, props.shared.commonLayer],
            environment: {
                ...props.shared.defaultEnvironmentVariables,
                CONFIG_PARAMETER_NAME: props.shared.configParameter.parameterName,
                COMPANY_PARAMETER_NAME: props.shared.companyParameter.parameterName,
                SESSIONS_TABLE_NAME: props.sessionsTable.tableName,
                QUESTIONS_TABLE_NAME: props.questionsTable.tableName,
                QUESTIONS_BY_SESSION_INDEX_NAME: props.bySessionIdIndex,
                CHATBOT_FILES_BUCKET_NAME: props.filesBucket.bucketName,
                API_KEYS_SECRETS_ARN: props.shared.apiKeysSecret.secretArn,
                MESSAGES_TOPIC_ARN: props.messagesTopic.topicArn,
                WORKSPACES_TABLE_NAME: props.ragEngines?.workspacesTable.tableName ?? "",
                WORKSPACES_BY_OBJECT_TYPE_INDEX_NAME: props.ragEngines?.workspacesByObjectTypeIndexName ?? "",
                AURORA_DB_SECRET_ID: props.ragEngines?.auroraPgVector?.database?.secret
                    ?.secretArn,
                SAGEMAKER_RAG_MODELS_ENDPOINT: props.ragEngines?.sageMakerRagModels?.model.endpoint
                    ?.attrEndpointName ?? "",
                OPEN_SEARCH_COLLECTION_ENDPOINT: props.ragEngines?.openSearchVector?.openSearchCollectionEndpoint ??
                    "",
                DEFAULT_KENDRA_INDEX_ID: props.ragEngines?.kendraRetrieval?.kendraIndex?.attrId ?? "",
                DEFAULT_KENDRA_INDEX_NAME: props.ragEngines?.kendraRetrieval?.kendraIndex?.name ?? "",
                DEFAULT_KENDRA_S3_DATA_SOURCE_ID: props.ragEngines?.kendraRetrieval?.kendraS3DataSource?.attrId ?? "",
                DEFAULT_KENDRA_S3_DATA_SOURCE_BUCKET_NAME: props.ragEngines?.kendraRetrieval?.kendraS3DataSourceBucket
                    ?.bucketName ?? "",
            },
        });
        if (props.config.bedrock?.enabled) {
            requestHandler.addToRolePolicy(new iam.PolicyStatement({
                actions: [
                    "bedrock:InvokeModel",
                    "bedrock:InvokeModelWithResponseStream",
                ],
                resources: ["*"],
            }));
            if (props.config.bedrock?.roleArn) {
                requestHandler.addToRolePolicy(new iam.PolicyStatement({
                    actions: ["sts:AssumeRole"],
                    resources: [props.config.bedrock.roleArn],
                }));
            }
        }
        if (props.ragEngines?.auroraPgVector) {
            props.ragEngines?.auroraPgVector.database.secret?.grantRead(requestHandler);
            props.ragEngines?.auroraPgVector.database.connections.allowDefaultPortFrom(requestHandler);
        }
        if (props.ragEngines?.openSearchVector) {
            requestHandler.addToRolePolicy(new iam.PolicyStatement({
                actions: ["aoss:APIAccessAll"],
                resources: [
                    props.ragEngines?.openSearchVector.openSearchCollection.attrArn,
                ],
            }));
            props.ragEngines.openSearchVector.addToAccessPolicy("request-handler-langchain", [requestHandler.role?.roleArn], ["aoss:ReadDocument", "aoss:WriteDocument"]);
        }
        if (props.ragEngines) {
            props.ragEngines.workspacesTable.grantReadWriteData(requestHandler);
            props.ragEngines.documentsTable.grantReadWriteData(requestHandler);
        }
        if (props.ragEngines?.sageMakerRagModels) {
            requestHandler.addToRolePolicy(new iam.PolicyStatement({
                actions: ["sagemaker:InvokeEndpoint"],
                resources: [props.ragEngines.sageMakerRagModels.model.endpoint.ref],
            }));
        }
        if (props.ragEngines?.kendraRetrieval) {
            props.ragEngines?.kendraRetrieval?.kendraS3DataSourceBucket?.grantRead(requestHandler);
            if (props.ragEngines.kendraRetrieval.kendraIndex) {
                requestHandler.addToRolePolicy(new iam.PolicyStatement({
                    actions: ["kendra:Retrieve", "kendra:Query"],
                    resources: [props.ragEngines.kendraRetrieval.kendraIndex.attrArn],
                }));
            }
            for (const item of props.config.rag.engines.kendra.external || []) {
                if (item.roleArn) {
                    requestHandler.addToRolePolicy(new iam.PolicyStatement({
                        actions: ["sts:AssumeRole"],
                        resources: [item.roleArn],
                    }));
                }
                else {
                    requestHandler.addToRolePolicy(new iam.PolicyStatement({
                        actions: ["kendra:Retrieve", "kendra:Query"],
                        resources: [
                            `arn:${cdk.Aws.PARTITION}:kendra:${item.region ?? cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:index/${item.kendraId}`,
                        ],
                    }));
                }
            }
        }
        props.sessionsTable.grantReadWriteData(requestHandler);
        props.questionsTable.grantReadWriteData(requestHandler);
        props.filesBucket.grantReadWrite(requestHandler);
        props.messagesTopic.grantPublish(requestHandler);
        props.shared.apiKeysSecret.grantRead(requestHandler);
        props.shared.configParameter.grantRead(requestHandler);
        props.shared.companyParameter.grantRead(requestHandler);
        // Add Amazon Bedrock permissions to the IAM role for the Lambda function
        requestHandler.addToRolePolicy(new iam.PolicyStatement({
            actions: ["bedrock:*", "bedrock:InvokeModelWithResponseStream"],
            resources: ["*"],
        }));
        requestHandler.addToRolePolicy(new iam.PolicyStatement({
            actions: [
                "comprehend:DetectDominantLanguage",
                "comprehend:DetectSentiment",
            ],
            resources: ["*"],
        }));
        const deadLetterQueue = new sqs.Queue(this, "DLQ", {
            enforceSSL: true,
        });
        const queue = new sqs.Queue(this, "Queue", {
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            // https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-queueconfig
            visibilityTimeout: cdk.Duration.minutes(15 * 6),
            deadLetterQueue: {
                queue: deadLetterQueue,
                maxReceiveCount: 3,
            },
            enforceSSL: true,
        });
        queue.addToResourcePolicy(new iam.PolicyStatement({
            actions: ["sqs:SendMessage"],
            resources: [queue.queueArn],
            principals: [
                new iam.ServicePrincipal("events.amazonaws.com"),
                new iam.ServicePrincipal("sqs.amazonaws.com"),
            ],
        }));
        requestHandler.addEventSource(new lambdaEventSources.SqsEventSource(queue));
        this.ingestionQueue = queue;
        this.requestHandler = requestHandler;
    }
    addSageMakerEndpoint({ endpoint, name, }) {
        this.requestHandler.addToRolePolicy(new iam.PolicyStatement({
            actions: ["sagemaker:InvokeEndpoint"],
            resources: [endpoint.ref],
        }));
        const cleanName = name.replace(/[\s.\-_]/g, "").toUpperCase();
        this.requestHandler.addEnvironment(`SAGEMAKER_ENDPOINT_${cleanName}`, endpoint.attrEndpointName);
    }
}
exports.LangChainInterface = LangChainInterface;
//# sourceMappingURL=data:application/json;base64,